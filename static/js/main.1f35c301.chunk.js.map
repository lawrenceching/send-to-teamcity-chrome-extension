{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","callback","key","console","log","layout","labelCol","span","wrapperCol","columns","title","dataIndex","rowSelection","onChange","selectedRowKeys","selectedRows","getCheckboxProps","record","disabled","name","App","props","state","tableData","teamcityUrl","teamcityToken","teamcityBuildTypeId","matchPattern","self","this","chrome","storage","sync","get","data","setState","runtime","sendMessage","action","response","undefined","urls","pattern","re","RegExp","filteredUrls","filter","url","test","i","map","warn","className","defaultActiveKey","tab","type","dataSource","size","Item","label","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8UAKOA,G,OAAWC,IAAXD,SAEP,SAASE,EAASC,GACdC,QAAQC,IAAIF,GAGhB,IAAMG,EAAS,CACXC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGjBE,EAAU,CACZ,CACIC,MAAO,MACPC,UAAW,OAEf,CACID,MAAO,QACPC,UAAW,UAKbC,EAAe,CACjBC,SAAU,SAACC,EAAiBC,GACxBZ,QAAQC,IAAR,2BAAgCU,GAAmB,iBAAkBC,IAEzEC,iBAAkB,SAAAC,GAAM,MAAK,CACzBC,SAA0B,kBAAhBD,EAAOE,KAEjBA,KAAMF,EAAOE,QA2GNC,E,kDArGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,GACXC,YAAa,KACbC,cAAe,KACfC,oBAAqB,KACrBC,aAAc,MAPH,E,gEAYf,IAAMC,EAAOC,KACRC,QAAYA,OAAOC,SACpB5B,QAAQC,IAAI,6CACZ0B,OAAOC,QAAQC,KAAKC,IAAI,CAAC,cAAe,gBAAiB,sBAAuB,iBAAiB,SAASC,GACtG/B,QAAQC,IAAI8B,GACZN,EAAKO,SAAS,CAACD,SAEfJ,OAAOM,QAAQC,YAAY,CAACC,OAAQ,kBAAkB,SAASC,GAC3D,GAAgB,MAAZA,QAAgCC,GAAZD,EAAwB,CAC5C,IAAME,EAAOF,EAASE,KACtBtC,QAAQC,IAAIqC,GACZ,IAAMC,EAAUR,EAAKP,aACjBgB,EAAK,IAAIC,OAAOF,GACdG,EAAeJ,EAAKK,QAAO,SAAAC,GAAG,OAAIJ,EAAGK,KAAKD,MAEhD5C,QAAQC,IAAI,4BAA6ByC,GAEzC,IAAII,EAAI,EACF1B,EAAYsB,EAAaK,KAAI,SAAAH,GAC/B,MAAO,CACH7C,IAAK,GAAM+C,IACXF,MACArC,MAAO,OAIfP,QAAQC,IAAI,yBAA0BmB,GAGtCK,EAAKO,SAAS,CACVZ,UAAWA,YAO3BpB,QAAQgD,KAAK,mD,+EAOX,IAEC5B,EAAaM,KAAKP,MAAlBC,UAGP,OADApB,QAAQC,IAAI,aAAcmB,GAEtB,yBAAK6B,UAAU,OAEX,kBAAC,IAAD,CAAMC,iBAAiB,IAAIxC,SAAUZ,GACjC,kBAACF,EAAD,CAASuD,IAAI,mBAAmBpD,IAAI,oBAChC,6BACI,kBAAC,IAAD,CACIU,aAAY,aACR2C,KAAM,YACH3C,GAEPH,QAASA,EACT+C,WAAYjC,EACZkC,KAAK,YAIjB,kBAAC1D,EAAD,CAASuD,IAAI,UAAUpD,IAAI,WACvB,kBAAC,IAASG,EACN,kBAAC,IAAKqD,KAAN,CAAWC,MAAM,gBACb,kBAAC,IAAD,CAAOC,YAAY,iCAEvB,kBAAC,IAAKF,KAAN,CAAWC,MAAM,kBACb,kBAAC,IAAD,CAAOC,YAAY,MAEvB,kBAAC,IAAKF,KAAN,CAAWC,MAAM,0BACb,kBAAC,IAAD,CAAOC,YAAY,MAEvB,kBAAC,IAAKF,KAAN,KACI,kBAAC,IAAD,CAAQH,KAAK,WAAb,mB,GA5FdM,IAAMC,WC3BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7E,QAAQ6E,MAAMA,EAAMC,c","file":"static/js/main.1f35c301.chunk.js","sourcesContent":["/*global chrome*/\nimport React, {useState} from 'react';\nimport {Button, Divider, Form, Input, Radio, Table, Tabs} from 'antd';\nimport './App.css';\n\nconst {TabPane} = Tabs;\n\nfunction callback(key) {\n    console.log(key);\n}\n\nconst layout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 16},\n};\n\nconst columns = [\n    {\n        title: 'Url',\n        dataIndex: 'url',\n    },\n    {\n        title: 'Title',\n        dataIndex: 'title',\n    }\n];\n\n\nconst rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n        console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n    },\n    getCheckboxProps: record => ({\n        disabled: record.name === 'Disabled User',\n        // Column configuration not to be checked\n        name: record.name,\n    }),\n};\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableData: [],\n            teamcityUrl: null,\n            teamcityToken: null,\n            teamcityBuildTypeId: null,\n            matchPattern: null,\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        if(!!chrome && !!chrome.storage) {\n            console.log('Running in a Chrome Extension environment');\n            chrome.storage.sync.get(['teamcityUrl', 'teamcityToken', 'teamcityBuildTypeId', 'matchPattern'], function(data) {\n                console.log(data);\n                self.setState({data});\n\n                chrome.runtime.sendMessage({action: \"getMatchedTab\"}, function(response) {\n                    if( response != null && response != undefined ) {\n                        const urls = response.urls;\n                        console.log(urls);\n                        const pattern = data.matchPattern;\n                        let re = new RegExp(pattern);\n                        const filteredUrls = urls.filter(url => re.test(url))\n\n                        console.log('setState():filteredUrls: ', filteredUrls);\n\n                        let i = 1;\n                        const tableData = filteredUrls.map(url => {\n                            return {\n                                key: '' + (i++),\n                                url,\n                                title: '',\n                            };\n                        });\n\n                        console.log('setState():tableData: ', tableData);\n\n\n                        self.setState({\n                            tableData: tableData\n                        })\n                    }\n                });\n            });\n\n        } else {\n            console.warn('Not running in a Chrome Extension environment');\n        }\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n\n        const {tableData} = this.state;\n\n        console.log('render(): ', tableData);\n        return (\n            <div className=\"App\">\n\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Batch Submission\" key=\"batch-submission\">\n                        <div>\n                            <Table\n                                rowSelection={{\n                                    type: 'checkbox',\n                                    ...rowSelection,\n                                }}\n                                columns={columns}\n                                dataSource={tableData}\n                                size=\"small\"\n                            />\n                        </div>\n                    </TabPane>\n                    <TabPane tab=\"Options\" key=\"options\">\n                        <Form {...layout}>\n                            <Form.Item label=\"TeamCity Url\">\n                                <Input placeholder=\"http://teamcity.example.com\"/>\n                            </Form.Item>\n                            <Form.Item label=\"TeamCity Token\">\n                                <Input placeholder=\"\"/>\n                            </Form.Item>\n                            <Form.Item label=\"TeamCity Build Type Id\">\n                                <Input placeholder=\"\"/>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\">Submit</Button>\n                            </Form.Item>\n                        </Form>\n                    </TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}