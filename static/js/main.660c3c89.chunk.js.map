{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","callback","key","console","log","layout","labelCol","span","wrapperCol","columns","title","dataIndex","rowSelection","onChange","selectedRowKeys","selectedRows","getCheckboxProps","record","disabled","name","submitUrls","urls","a","Promise","resolve","reject","chrome","runtime","sendMessage","action","response","App","props","state","teamcityUrl","teamcityToken","teamcityBuildTypeId","matchPattern","self","this","storage","sync","get","data","setState","undefined","warn","submittedUrls","message","info","length","re","RegExp","filteredUrls","filter","url","test","i","tableData","map","className","defaultActiveKey","tab","style","margin","placeholder","value","type","onClick","onSubmitButtonClick","dataSource","size","Item","label","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"mYAKOA,G,OAAWC,IAAXD,SAEP,SAASE,EAASC,GACdC,QAAQC,IAAIF,GAGhB,IAAMG,EAAS,CACXC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGjBE,EAAU,CACZ,CACIC,MAAO,MACPC,UAAW,OAEf,CACID,MAAO,QACPC,UAAW,UAKbC,EAAe,CACjBC,SAAU,SAACC,EAAiBC,GACxBZ,QAAQC,IAAR,2BAAgCU,GAAmB,iBAAkBC,IAEzEC,iBAAkB,SAAAC,GAAM,MAAK,CACzBC,SAA0B,kBAAhBD,EAAOE,KAEjBA,KAAMF,EAAOE,Q,SAINC,E,8EAAf,WAA0BC,GAA1B,SAAAC,EAAA,6DACInB,QAAQC,IAAI,oBAAqBiB,GADrC,SAGkB,IAAIE,SAAQ,SAACC,EAASC,GAChCC,OAAOC,QAAQC,YAAY,CACvBC,OAAQ,YACRR,SACD,SAAUS,GACT3B,QAAQC,IAAI,sCAAuC0B,GACnDN,EAAQM,EAAST,YAT7B,oF,0BAuIeU,E,kDAtHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTZ,KAAM,GACNa,YAAa,KACbC,cAAe,KACfC,oBAAqB,KACrBC,aAAc,MAPH,E,gEAYf,IAAMC,EAAOC,KACRb,QAAYA,OAAOc,SACpBrC,QAAQC,IAAI,6CACZsB,OAAOc,QAAQC,KAAKC,IAAI,CAAC,cAAe,gBAAiB,sBAAuB,iBAAiB,SAASC,GACtGxC,QAAQC,IAAIuC,GACZL,EAAKM,SAASD,GAEdjB,OAAOC,QAAQC,YAAY,CAACC,OAAQ,kBAAkB,SAASC,GAC3D,GAAiB,OAAbA,QAAkCe,IAAbf,EAAyB,CAC9C,IAAMT,EAAOS,EAAST,KACtBiB,EAAKM,SAAS,CACVvB,KAAMA,YAOtBlB,QAAQ2C,KAAK,mD,mIAOKzB,G,8EACtBlB,QAAQC,IAAI,uB,SACgBgB,EAAWC,G,OAAjC0B,E,OACNC,IAAQC,KAAR,UAAgBF,EAAcG,OAA9B,sC,iIAGM,IAAD,SAODX,KAAKN,MALLZ,EAFC,EAEDA,KACAa,EAHC,EAGDA,YACAC,EAJC,EAIDA,cACAC,EALC,EAKDA,oBACAC,EANC,EAMDA,aAGAc,EAAK,IAAIC,OAAOf,GACdgB,EAAehC,EAAKiC,QAAO,SAAAC,GAAG,OAAIJ,EAAGK,KAAKD,MAEhDpD,QAAQC,IAAI,4BAA6BiD,GAEzC,IAAII,EAAI,EACFC,EAAYL,EAAaM,KAAI,SAAAJ,GAC/B,MAAO,CACHrD,IAAK,GAAMuD,IACXF,MACA7C,MAAO,OAKf,OADAP,QAAQC,IAAI,aAAcsD,GAEtB,yBAAKE,UAAU,OAEX,kBAAC,IAAD,CAAMC,iBAAiB,IAAIhD,SAAUZ,GACjC,kBAACF,EAAD,CAAS+D,IAAI,mBAAmB5D,IAAI,oBAEhC,kBAAC,IAAD,CAAK6D,MACD,CAACC,OAAQ,SAET,kBAAC,IAAD,CAAKzD,KAAM,GACP,kBAAC,IAAD,CAAO0D,YAAY,GAAGC,MAAO7B,KAEjC,kBAAC,IAAD,CAAK9B,KAAM,GAAG,kBAAC,IAAD,CAAQ4D,KAAK,WAAb,WACd,kBAAC,IAAD,CAAK5D,KAAM,KACX,kBAAC,IAAD,CAAKA,KAAM,GAAG,kBAAC,IAAD,CAAQ4D,KAAK,UAAUC,QAAS,kBAAM,EAAKC,oBAAoBhB,KAA/D,YAElB,6BACI,kBAAC,IAAD,CACIzC,aAAY,aACRuD,KAAM,YACHvD,GAEPH,QAASA,EACT6D,WAAYZ,EACZa,KAAK,YAIjB,kBAACxE,EAAD,CAAS+D,IAAI,UAAU5D,IAAI,WACvB,kBAAC,IAASG,EACN,kBAAC,IAAKmE,KAAN,CAAWC,MAAM,gBACb,kBAAC,IAAD,CAAOR,YAAY,8BAA8BC,MAAOhC,KAE5D,kBAAC,IAAKsC,KAAN,CAAWC,MAAM,kBACb,kBAAC,IAAD,CAAOR,YAAY,GAAGC,MAAO/B,KAEjC,kBAAC,IAAKqC,KAAN,CAAWC,MAAM,0BACb,kBAAC,IAAD,CAAOR,YAAY,GAAGC,MAAO9B,KAEjC,kBAAC,IAAKoC,KAAN,KACI,kBAAC,IAAD,CAAQL,KAAK,WAAb,mB,GA7GdO,IAAMC,WC1CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1F,QAAQ0F,MAAMA,EAAM7C,c","file":"static/js/main.660c3c89.chunk.js","sourcesContent":["/*global chrome*/\nimport React, {useState} from 'react';\nimport {Button, Divider, Form, Input, Row, Col, Table, Tabs, message} from 'antd';\nimport './App.css';\n\nconst {TabPane} = Tabs;\n\nfunction callback(key) {\n    console.log(key);\n}\n\nconst layout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 16},\n};\n\nconst columns = [\n    {\n        title: 'Url',\n        dataIndex: 'url',\n    },\n    {\n        title: 'Title',\n        dataIndex: 'title',\n    }\n];\n\n\nconst rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n        console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n    },\n    getCheckboxProps: record => ({\n        disabled: record.name === 'Disabled User',\n        // Column configuration not to be checked\n        name: record.name,\n    }),\n};\n\nasync function submitUrls(urls) {\n    console.log('Submitting urls: ', urls);\n\n    return await (new Promise((resolve, reject) => {\n        chrome.runtime.sendMessage({\n            action: \"submitAll\",\n            urls\n        }, function (response) {\n            console.log('Received response from background: ', response);\n            resolve(response.urls);\n        });\n    }));\n\n}\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            urls: [],\n            teamcityUrl: null,\n            teamcityToken: null,\n            teamcityBuildTypeId: null,\n            matchPattern: null,\n        };\n    }\n\n    componentDidMount() {\n        const self = this;\n        if(!!chrome && !!chrome.storage) {\n            console.log('Running in a Chrome Extension environment');\n            chrome.storage.sync.get(['teamcityUrl', 'teamcityToken', 'teamcityBuildTypeId', 'matchPattern'], function(data) {\n                console.log(data);\n                self.setState(data);\n\n                chrome.runtime.sendMessage({action: \"getMatchedTab\"}, function(response) {\n                    if( response !== null && response !== undefined ) {\n                        const urls = response.urls;\n                        self.setState({\n                            urls: urls\n                        })\n                    }\n                });\n            });\n\n        } else {\n            console.warn('Not running in a Chrome Extension environment');\n        }\n    }\n\n    componentWillUnmount() {\n    }\n\n    async onSubmitButtonClick(urls) {\n        console.log('onSubmitButtonClick');\n        const submittedUrls = await submitUrls(urls);\n        message.info(`${submittedUrls.length} pages are submitted to TeamCity!`);\n    }\n\n    render() {\n        const {\n            urls,\n            teamcityUrl,\n            teamcityToken,\n            teamcityBuildTypeId,\n            matchPattern,\n        } = this.state;\n\n        let re = new RegExp(matchPattern);\n        const filteredUrls = urls.filter(url => re.test(url))\n\n        console.log('setState():filteredUrls: ', filteredUrls);\n\n        let i = 1;\n        const tableData = filteredUrls.map(url => {\n            return {\n                key: '' + (i++),\n                url,\n                title: '',\n            };\n        });\n\n        console.log('render(): ', tableData);\n        return (\n            <div className=\"App\">\n\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Batch Submission\" key=\"batch-submission\">\n\n                        <Row style={\n                            {margin: '10px'}\n                        }>\n                            <Col span={8}>\n                                <Input placeholder=\"\" value={matchPattern}/>\n                            </Col>\n                            <Col span={2}><Button type=\"primary\">Filter</Button></Col>\n                            <Col span={12}></Col>\n                            <Col span={2}><Button type=\"primary\" onClick={() => this.onSubmitButtonClick(filteredUrls)}>Submit</Button></Col>\n                        </Row>\n                        <div>\n                            <Table\n                                rowSelection={{\n                                    type: 'checkbox',\n                                    ...rowSelection,\n                                }}\n                                columns={columns}\n                                dataSource={tableData}\n                                size=\"small\"\n                            />\n                        </div>\n                    </TabPane>\n                    <TabPane tab=\"Options\" key=\"options\">\n                        <Form {...layout}>\n                            <Form.Item label=\"TeamCity Url\">\n                                <Input placeholder=\"http://teamcity.example.com\" value={teamcityUrl}/>\n                            </Form.Item>\n                            <Form.Item label=\"TeamCity Token\">\n                                <Input placeholder=\"\" value={teamcityToken}/>\n                            </Form.Item>\n                            <Form.Item label=\"TeamCity Build Type Id\">\n                                <Input placeholder=\"\" value={teamcityBuildTypeId}/>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\">Submit</Button>\n                            </Form.Item>\n                        </Form>\n                    </TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}