{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","callback","key","console","log","saveToStorage","value","data","chrome","storage","sync","set","get","layout","labelCol","span","wrapperCol","columns","title","dataIndex","rowSelection","onChange","selectedRowKeys","selectedRows","getCheckboxProps","record","disabled","name","submitUrls","urls","a","Promise","resolve","reject","runtime","sendMessage","action","response","App","props","state","teamcityUrl","teamcityToken","teamcityBuildTypeId","matchPattern","event","this","setState","target","self","undefined","warn","submittedUrls","message","info","length","re","RegExp","filteredUrls","filter","url","test","i","tableData","map","className","defaultActiveKey","tab","style","margin","placeholder","e","onMatchPatternValueChange","type","onClick","onFilterButtonClick","onSubmitButtonClick","dataSource","size","Item","label","onTeamCityUrlInputChange","onTeamcityTokenInputChange","onTeamcityBuildTypeIdInputChange","onOptionsTabSubmitButtonClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5e1bd518.chunk.js","sourcesContent":["/*global chrome*/\nimport React, {useState} from 'react';\nimport {Button, Divider, Form, Input, Row, Col, Table, Tabs, message} from 'antd';\nimport './App.css';\n\nconst {TabPane} = Tabs;\n\nfunction callback(key) {\n    console.log(key);\n}\n\nfunction saveToStorage(key, value) {\n    const data = {};\n    data[key] = value;\n    chrome.storage.sync.set(data, function() {\n        console.log(`Saved configuration: ${key} -> ${value}`);\n\n        chrome.storage.sync.get(['teamcityUrl', 'teamcityToken', 'teamcityBuildTypeId', 'matchPattern'], function(data) {\n            console.log('After set: ', data);\n        });\n    })\n}\n\nconst layout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 16},\n};\n\nconst columns = [\n    {\n        title: 'Url',\n        dataIndex: 'url',\n    },\n    {\n        title: 'Title',\n        dataIndex: 'title',\n    }\n];\n\n\nconst rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n        console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n    },\n    getCheckboxProps: record => ({\n        disabled: record.name === 'Disabled User',\n        // Column configuration not to be checked\n        name: record.name,\n    }),\n};\n\nasync function submitUrls(urls) {\n    console.log('Submitting urls: ', urls);\n\n    return await (new Promise((resolve, reject) => {\n        chrome.runtime.sendMessage({\n            action: \"submitAll\",\n            urls\n        }, function (response) {\n            console.log('Received response from background: ', response);\n            resolve(response.urls);\n        });\n    }));\n\n}\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            urls: [],\n            teamcityUrl: null,\n            teamcityToken: null,\n            teamcityBuildTypeId: null,\n            matchPattern: '',\n        };\n    }\n\n    onTeamCityUrlInputChange(event) {\n        this.setState({teamcityUrl: event.target.value});\n    }\n\n    onTeamcityTokenInputChange(event) {\n        this.setState({teamcityToken: event.target.value});\n    }\n\n    onTeamcityBuildTypeIdInputChange(event) {\n        this.setState({teamcityBuildTypeId: event.target.value});\n    }\n\n    componentDidMount() {\n        const self = this;\n        if(!!chrome && !!chrome.storage) {\n            console.log('Running in a Chrome Extension environment');\n            chrome.storage.sync.get(['teamcityUrl', 'teamcityToken', 'teamcityBuildTypeId', 'matchPattern'], function(data) {\n                console.log(data);\n                self.setState(data);\n\n                chrome.runtime.sendMessage({action: \"getMatchedTab\"}, function(response) {\n                    if( response !== null && response !== undefined ) {\n                        const urls = response.urls;\n                        self.setState({\n                            urls: urls\n                        })\n                    }\n                });\n            });\n\n        } else {\n            console.warn('Not running in a Chrome Extension environment');\n        }\n    }\n\n    componentWillUnmount() {\n    }\n\n    async onSubmitButtonClick(urls) {\n        console.log('onSubmitButtonClick');\n        const submittedUrls = await submitUrls(urls);\n        message.info(`${submittedUrls.length} pages are submitted to TeamCity!`);\n    }\n\n    onFilterButtonClick(event) {\n        console.log('onFilterButtonClick');\n        const pattern = this.state.matchPattern;\n        saveToStorage('matchPattern', pattern)\n    }\n\n    onMatchPatternValueChange(event) {\n        this.setState({matchPattern: event.target.value});\n    }\n\n    onOptionsTabSubmitButtonClick(event) {\n        const {\n            teamcityUrl,\n            teamcityToken,\n            teamcityBuildTypeId,\n        } = this.state;\n        saveToStorage('teamcityUrl', teamcityUrl);\n        saveToStorage('teamcityToken', teamcityToken);\n        saveToStorage('teamcityBuildTypeId', teamcityBuildTypeId);\n    }\n\n    render() {\n        const {\n            urls,\n            teamcityUrl,\n            teamcityToken,\n            teamcityBuildTypeId,\n            matchPattern,\n        } = this.state;\n\n        let re = new RegExp(matchPattern);\n        const filteredUrls = urls.filter(url => re.test(url))\n\n        console.log('setState():filteredUrls: ', filteredUrls);\n\n        let i = 1;\n        const tableData = filteredUrls.map(url => {\n            return {\n                key: '' + (i++),\n                url,\n                title: '',\n            };\n        });\n\n        console.log('render(): ', tableData);\n        return (\n            <div className=\"App\">\n\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Batch Submission\" key=\"batch-submission\">\n\n                        <Row style={\n                            {margin: '10px'}\n                        }>\n                            <Col span={8}>\n                                <Input placeholder=\"\" value={matchPattern} onChange={e =>  this.onMatchPatternValueChange(e)}/>\n                            </Col>\n                            <Col span={2}><Button type=\"primary\" onClick={(e) => this.onFilterButtonClick(e)}>Filter</Button></Col>\n                            <Col span={12}></Col>\n                            <Col span={2}><Button type=\"primary\" onClick={() => this.onSubmitButtonClick(filteredUrls)}>Submit</Button></Col>\n                        </Row>\n                        <div>\n                            <Table\n                                rowSelection={{\n                                    type: 'checkbox',\n                                    ...rowSelection,\n                                }}\n                                columns={columns}\n                                dataSource={tableData}\n                                size=\"small\"\n                            />\n                        </div>\n                    </TabPane>\n                    <TabPane tab=\"Options\" key=\"options\">\n                        <Form {...layout}>\n                            <Form.Item label=\"TeamCity Url\">\n                                <Input placeholder=\"http://teamcity.example.com\" value={teamcityUrl} onChange={e => this.onTeamCityUrlInputChange(e)}/>\n                            </Form.Item>\n                            <Form.Item label=\"TeamCity Token\">\n                                <Input placeholder=\"\" value={teamcityToken} onChange={e => this.onTeamcityTokenInputChange(e)}/>\n                            </Form.Item>\n                            <Form.Item label=\"TeamCity Build Type Id\">\n                                <Input placeholder=\"\" value={teamcityBuildTypeId} onChange={e => this.onTeamcityBuildTypeIdInputChange(e)}/>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\" onClick={e => this.onOptionsTabSubmitButtonClick(e)}>Submit</Button>\n                            </Form.Item>\n                        </Form>\n                    </TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}